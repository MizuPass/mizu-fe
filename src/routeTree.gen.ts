/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as AppEventsRouteImport } from './routes/app/events'
import { Route as AppEventsIndexRouteImport } from './routes/app/events/index'
import { Route as AppEventsEventIdRouteImport } from './routes/app/events.$eventId'

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppEventsRoute = AppEventsRouteImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => AppRoute,
} as any)
const AppEventsIndexRoute = AppEventsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppEventsRoute,
} as any)
const AppEventsEventIdRoute = AppEventsEventIdRouteImport.update({
  id: '/$eventId',
  path: '/$eventId',
  getParentRoute: () => AppEventsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/events': typeof AppEventsRouteWithChildren
  '/app/': typeof AppIndexRoute
  '/app/events/$eventId': typeof AppEventsEventIdRoute
  '/app/events/': typeof AppEventsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppIndexRoute
  '/app/events/$eventId': typeof AppEventsEventIdRoute
  '/app/events': typeof AppEventsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/events': typeof AppEventsRouteWithChildren
  '/app/': typeof AppIndexRoute
  '/app/events/$eventId': typeof AppEventsEventIdRoute
  '/app/events/': typeof AppEventsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/events'
    | '/app/'
    | '/app/events/$eventId'
    | '/app/events/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/app/events/$eventId' | '/app/events'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/events'
    | '/app/'
    | '/app/events/$eventId'
    | '/app/events/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/events': {
      id: '/app/events'
      path: '/events'
      fullPath: '/app/events'
      preLoaderRoute: typeof AppEventsRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/events/': {
      id: '/app/events/'
      path: '/'
      fullPath: '/app/events/'
      preLoaderRoute: typeof AppEventsIndexRouteImport
      parentRoute: typeof AppEventsRoute
    }
    '/app/events/$eventId': {
      id: '/app/events/$eventId'
      path: '/$eventId'
      fullPath: '/app/events/$eventId'
      preLoaderRoute: typeof AppEventsEventIdRouteImport
      parentRoute: typeof AppEventsRoute
    }
  }
}

interface AppEventsRouteChildren {
  AppEventsEventIdRoute: typeof AppEventsEventIdRoute
  AppEventsIndexRoute: typeof AppEventsIndexRoute
}

const AppEventsRouteChildren: AppEventsRouteChildren = {
  AppEventsEventIdRoute: AppEventsEventIdRoute,
  AppEventsIndexRoute: AppEventsIndexRoute,
}

const AppEventsRouteWithChildren = AppEventsRoute._addFileChildren(
  AppEventsRouteChildren,
)

interface AppRouteChildren {
  AppEventsRoute: typeof AppEventsRouteWithChildren
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppEventsRoute: AppEventsRouteWithChildren,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
